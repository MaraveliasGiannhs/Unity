using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MoveTestWithChild : MonoBehaviour
{
    [Header("Scripts, Transforms and Rigidbodies")]
    CollideDetector vaultColBot;
    StateManager sm;
    [SerializeField] SlidingVectorRotation sv;
    public Transform groundCheck;
    public Transform player;
    public Rigidbody rb;


    public float acceleration = 5f;


    [Header("Movement Vectors")]
    public Vector3 dir;
    public Vector3 forwardMovement;
    public Vector3 rightMovement;


    [Header("Sliding Vectors")]
    public Vector3 slideDir;
    public Vector3 forwardSlide;
    public Vector3 rightSlide;


    [Header("Jump/Ground/Slope Checks")]
    public float distanceStepCheck; //for slope check
    public float groundSphereDistance = 2f;
    public float jumpDistanceCheck; //needs to be smaller than ground sphere to avoid inconsistent jumps
    public bool isGrounded;
    public bool canJump;
    

    [Header("Layers")]
    public LayerMask isGround;
    public LayerMask playerLayermask;


    [Header("Inputs")]
    public float horizontalInput;
    public float verticalInput;


    [Header("Key Binds")]  //might move to Input Manager
    public KeyCode sprintButton = KeyCode.LeftShift;
    public KeyCode jumpButton = KeyCode.Space;


    private float rotatedX;
    private float rotatedY;
    private float rotatedZ;


    private float slopeAngle;
    private float forwardAngle;
    private float rightAngle;
    private bool onSlope;
    private RaycastHit stepHit;

    //public float slidingStrafeSpeed;

    void Start()
    {
        rb = GetComponentInParent<Rigidbody>();
        sm = GetComponent<StateManager>();

        vaultColBot = GetComponentInParent<CollideDetector>();
    }


    void Update()
    {
        Step(); //edw htan arxika
        JumpCheck();

    }


    void FixedUpdate()
    {
        PlayerMovement();
        CanVault();
    }

    void PlayerMovement()
    {

        transform.eulerAngles = new Vector3(rotatedX, rb.transform.eulerAngles.y, rotatedZ);  //rotate vector

        horizontalInput = Input.GetAxis("Horizontal");
        verticalInput = Input.GetAxis("Vertical");

        //dir for running and sprinting
        forwardMovement = transform.forward * verticalInput;
        rightMovement = transform.right * horizontalInput;
        dir = (forwardMovement + rightMovement).normalized;


        //dir for sliding
        forwardSlide = sv.transform.forward * sm.slideVertical;
        rightSlide = sv.transform.right * sm.slideHorizontal;
        slideDir = (forwardSlide + rightSlide).normalized;


        //for bug
        if (dir != Vector3.zero)
            player.transform.forward = dir * Time.deltaTime;

        //apo edw k katw ta speed checks
    }


    void Step()
    {
        onSlope = Physics.Raycast(transform.position, Vector3.down, out stepHit, distanceStepCheck, ~playerLayermask);

        if (onSlope)  //sinistwsa
        {

            slopeAngle = Vector3.Angle(Vector3.up, stepHit.normal);  
            forwardAngle = Vector3.Angle(transform.forward, stepHit.normal) - 90;
            rightAngle = Vector3.Angle(transform.right, stepHit.normal) - 90;

            rotatedX = transform.eulerAngles.x - forwardAngle;
            rotatedZ = transform.eulerAngles.z + rightAngle;
        }
        else
        {

            slopeAngle = Vector3.Angle(Vector3.up, stepHit.normal);
            forwardAngle = Vector3.Angle(transform.forward, stepHit.normal) + 45;
            rightAngle = Vector3.Angle(transform.right, stepHit.normal) + 45;

            rotatedX = 0f;
            rotatedZ = 0f;
        }
    }

    public bool CanVault()
    {
        if (vaultColBot.IsColliding)
        {
            print("can vault");
            return true;
        }
        else
            return false;
    }

    public void JumpCheck()
    {
        isGrounded = Physics.CheckSphere(groundCheck.position, groundSphereDistance, isGround);
        bool jumpSphere = Physics.CheckSphere(groundCheck.position, jumpDistanceCheck, isGround);

        if (isGrounded && jumpSphere)
            canJump = true;
        else
            canJump = false;
    }
}

