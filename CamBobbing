using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CamBobbingTest : MonoBehaviour
{
    [SerializeField] private StateManager sm;
    camController cc;


    [Header("Vertical bobbing")]
    public float bobbingSpeed; // Speed of the camera bobbing
    public float bobbingAmount; // Amount of camera bobbing
    public float midpoint; // Midpoint of the bobbing motion
    private float timer = 0.0f;
    
    [Header("Horizontal Tilt")]
    public float cameraTiltMultiplier;
    public float cameraTiltSmoothTime;
    public float cameraZTilt;
    public float maxCamZTilt;

    private float horizontal;
    private float vertical;

    [Header("For Vault Animation")]
    public float VaultSmoothTime;
    public float maxVaultTilt;
    public bool canTiltCam;

    public AnimationCurve curve;
    private float elapsedTime=0;



    void Start()
    {
        cc = GetComponentInParent<camController>();
        //sm = GetComponent<StateManager>();
    }


    void Update()
    {
        if (Input.GetKeyDown(KeyCode.F))
        {
            StartCoroutine(TiltCameraOnVault());
            
        
        }
        if (canTiltCam)
            Tilt();


        //TiltCamera();
        TiltCameraWithHorizontalMovement();
        ChangeBobbingSpeed();

        // Check if the player is moving
        if ((Mathf.Abs(Input.GetAxis("Horizontal")) > 0.1f || Mathf.Abs(Input.GetAxis("Vertical")) > 0.1f) && sm.movementState != StateManager.MovementState.Sliding )
        {
            // Calculate the vertical position of the camera using a sinusoidal function
            float waveslice = 0.0f;
             horizontal = Input.GetAxis("Horizontal");
             vertical = Input.GetAxis("Vertical");

            if (Mathf.Abs(horizontal) == 0 && Mathf.Abs(vertical) == 0)
            {
                timer = 0.0f;
            }
            else
            {
                waveslice = Mathf.Sin(timer);
                timer += bobbingSpeed;
                if (timer > Mathf.PI * 2)
                {
                    timer -= Mathf.PI * 2;
                }
            }

            // Calculate the position offset based on the waveslice
            float translateChange = 0.0f;
            float totalAxes = Mathf.Abs(horizontal) + Mathf.Abs(vertical);
            totalAxes = Mathf.Clamp(totalAxes, 0.0f, 1.0f);
            waveslice = totalAxes * waveslice;

            translateChange = waveslice * bobbingAmount;

            // Apply the bobbing motion to the camera's position
            Vector3 localPosition = transform.localPosition;
            localPosition.y = midpoint + translateChange;
            transform.localPosition = localPosition;

        }
        else
        {
            // If the player is not moving, reset the timer and return the camera to its original position
            timer = 0.0f;
            Vector3 localPosition = transform.localPosition;
            localPosition.y = midpoint;
            transform.localPosition = localPosition;
        }
    }

    void TiltCamera()
    {
        //TODO : add tilt to the camera when moving horizontally OR make the tilt exclusivelly for AD movement
        //done, ill prob remove this method;

        cameraZTilt = Mathf.Lerp(0, cc.mouseX * cameraTiltMultiplier, cameraTiltSmoothTime);
        
        if (cameraZTilt > maxCamZTilt)
        {
            cameraZTilt = maxCamZTilt;
        }
        else if (cameraZTilt < -maxCamZTilt)
        {
            cameraZTilt = -maxCamZTilt;
        }
        transform.localEulerAngles = new Vector3(0, 0, cameraZTilt);
    }

    void ChangeBobbingSpeed()
    {
        if (sm.movementState == StateManager.MovementState.Sprinting)
        {
            bobbingSpeed = 0.15f;
            bobbingAmount = 0.1f;
        }
            
        else
            bobbingSpeed = 0.09f;
    }

    void TiltCameraWithHorizontalMovement()
    {

        cameraZTilt = Mathf.Lerp(cameraZTilt, -horizontal * cameraTiltMultiplier, cameraTiltSmoothTime);

        transform.localEulerAngles = new Vector3(0, 0, cameraZTilt);

    }

    IEnumerator TiltCameraOnVault()
    {
        canTiltCam = true;

        yield return new WaitForSecondsRealtime(0.5f);
        canTiltCam = false;
        elapsedTime = 0;
    }

    void Tilt()
    {
        elapsedTime += Time.deltaTime;
        float percComplete = elapsedTime / VaultSmoothTime;

        cameraZTilt = Mathf.Lerp(cameraZTilt, maxVaultTilt, curve.Evaluate(percComplete));

        transform.localEulerAngles = new Vector3(0, 0, cameraZTilt);
    }
}
